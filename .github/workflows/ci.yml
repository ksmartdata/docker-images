name: CI
on:
  pull_request:
    branches:
      - main

jobs:
  check-ci-build-target:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check CI build targets
        run: ./scripts/check-ci-build-target.sh
      - name: Show check result
        if: ${{ success() }}
        run: echo "All build targets in CI configuration match directories in images folder."

  check-dockerfile-source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check Dockerfile sources
        run: ./scripts/check-dockerfile-source.sh        
      - name: Show check result
        if: ${{ success() }}
        run: echo "All Dockerfile sources are using specific commit hashes, tags or releases instead of master/main branches."

  build-and-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ["rocketmq-exporter", "rclone-mongo", "mysqld-exporter", "percona-toolkit", "mysql-operator-sidecar-5.7"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check if target directory has changes
        id: check-changes
        run: |
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "^images/${{ matrix.target }}/"; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Set up QEMU
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: docker/setup-buildx-action@v3.10.0

      - name: Build for test multi-platform
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./images/${{ matrix.target }}
          file: ./images/${{ matrix.target }}/Dockerfile
          push: false
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/ksmartdata/${{ matrix.target }}:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build for scan vulnerabilities
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./images/${{ matrix.target }}
          file: ./images/${{ matrix.target }}/Dockerfile
          push: false
          load: true
          platforms: linux/amd64
          tags: ghcr.io/ksmartdata/${{ matrix.target }}:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Scan image vulnerabilities
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ghcr.io/ksmartdata/${{ matrix.target }}:ci
          format: 'table'
          severity: 'CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          trivy-config: .trivy.yaml
          # output: ./trivy-report.sarif
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   with:
      #     sarif_file: ./trivy-report.sarif
